package models

// JSONValue represents any JSON value (string, number, boolean, null, object, array)
type JSONValue interface{}

// JSONObject represents a JSON object, which is a map of strings to JSONValues.
type JSONObject map[string]JSONValue

// JSONArray represents a JSON array, which is a slice of JSONValues.
type JSONArray []JSONValue

// IntermediateRepresentation holds parsed JSON data for analysis
type IntermediateRepresentation struct {
	Root        JSONValue
	RootIsArray bool // True if the root of the JSON is an array vs an object
}

// GoTypeKind represents the inferred Go type
type GoTypeKind string

const (
	// Primitive types
	String    GoTypeKind = "string"
	Int       GoTypeKind = "int" // Defaulting to int, could be int64
	Float     GoTypeKind = "float64"
	Bool      GoTypeKind = "bool"
	Interface GoTypeKind = "interface{}" // For null or mixed arrays

	// Complex types
	Struct GoTypeKind = "struct"
	Slice  GoTypeKind = "slice"

	// Special string types
	Time GoTypeKind = "time.Time" // Will require import "time"
	UUID GoTypeKind = "uuid.UUID" // Will require import "github.com/google/uuid" or similar
)

// TypeInfo holds information about an inferred Go type.
type TypeInfo struct {
	Kind             GoTypeKind `json:"kind"`                         // e.g., String, Int, Struct, Slice
	Name             string     `json:"name"`                         // e.g., "string", "int", "MyStruct", "[]UserDetails"
	IsPointer        bool       `json:"is_pointer,omitempty"`         // True if the type should be a pointer (e.g., for nullable fields)
	StructName       string     `json:"struct_name,omitempty"`        // If Kind is Struct, this is the name of the defined struct.
	SliceElementType *TypeInfo  `json:"slice_element_type,omitempty"` // If Kind is Slice, this describes the element type.
}

// FieldInfo represents a field within a Go struct to be generated.
type FieldInfo struct {
	JSONKey string            `json:"json_key"` // Original key from JSON
	GoName  string            `json:"go_name"`  // Generated Go field name (e.g., "UserName" from "user_name")
	GoType  TypeInfo          `json:"go_type"`  // Inferred Go type for this field
	JSONTag string            `json:"json_tag"` // e.g., `json:"user_name,omitempty"`
	Tags    map[string]string `json:"tags"`     // Multiple tag formats: {"json": "user_name,omitempty", "yaml": "user_name", "xml": "user_name"}
	Comment string            `json:"comment"`  // Field comment
}

// StructDef represents a Go struct definition that needs to be generated.
// This will be the primary output of the Analyzer.
type StructDef struct {
	Name   string      `json:"name"`    // Name of the Go struct (e.g., "Root", "User", "Address")
	Fields []FieldInfo `json:"fields"`  // List of fields in this struct
	IsRoot bool        `json:"is_root"` // True if this is a top-level struct generated from the JSON root
	// We might add comments or other metadata here later.
}

// AnalysisResult holds all the struct definitions generated by the analyzer.
type AnalysisResult struct {
	Structs []StructDef `json:"structs"`
	// We might add required imports here later, e.g. "time", "github.com/google/uuid"
	Imports map[string]struct{} `json:"imports"`
}
